class Solution {
    public boolean isPossible(int[] time, int totalTrips, int n, long mid){
        long trips=0;

        for(int i=0;i<n;i++){
            trips+=(mid/time[i]);
        }
        return trips>=totalTrips;
    }
    public long minimumTime(int[] time, int totalTrips) {
        //ith -> bus
        // time[i] -> time taken by ith bus
        // each bus can make multiple trips 
        //next trips start immediately after completion of previous trip
        //each bus operates independently
        //totalTrips denotes the no. of trips all the buses should make in total.
        //(ans>=totalTrips) -> this is considered as my answer
        // minimum time to cover atleast all the trips

        long si=Long.MAX_VALUE,ei=0;
        int n=time.length;
        for(int i=0;i<n;i++){
            si=Math.min(si,time[i]);
            ei=Math.max(ei,time[i]);
        }
        ei=ei*totalTrips;
        long p_ans=si;
        while(si<=ei){
            long mid=si+(ei-si)/2;
            if(isPossible(time,totalTrips,n,mid)){
                p_ans=mid;
                ei=mid-1;
            }else{
                si=mid+1;
            }
        }
        return p_ans;
    }
}