Approach -> 1

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        // (m*n) -> done
        // (m logn) -> bit optimal
        // (logm*logn) -> mostly optimal
        // 2 (log(m+n)) -> best approach
        int m=matrix.length;
        int n=matrix[0].length;

        for(int row=0;row<m;row++){ //O(m)
            
            int si=0;
            int ei=n-1;
            
            while(si<=ei){
                int mid=si+(ei-si)/2;
                if(matrix[row][mid]==target){
                    return true;
                }else if(matrix[row][mid]<target){
                    si=mid+1;
                }else{
                    ei=mid-1;
                }
            }
        }
        return false;
    }
}

Approach -> 2

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        // (m*n) -> done
        // (m logn) -> bit optimal
        // (logm*logn) -> mostly optimal
        // 2 (log(m+n)) -> best approach
        int m=matrix.length;
        int n=matrix[0].length;
        int siRow=0,eiRow=m-1;

        while(siRow<=eiRow){
            int midRow=siRow+(eiRow-siRow)/2;

            if(matrix[midRow][0]==target){
                return true;
            }else if(matrix[midRow][0]>target){
                eiRow=midRow-1;
            }else{
                int siCol=1,eiCol=n-1;
                while(siCol<=eiCol){
                    int midCol=siCol+(eiCol-siCol)/2;
                    if(matrix[midRow][midCol]==target){
                        return true;
                    }else if(matrix[midRow][midCol]>target){
                        eiCol=midCol-1;
                    }else{
                        siCol=midCol+1;
                    }
                }
                siRow=midRow+1;
            }
        }
        return false;
    }
}

Approach -> 3

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        // (m*n) -> done
        // (m logn) -> bit optimal (done)
        // (logm*logn) -> mostly optimal (done)
        // 2 (log(m+n)) -> best approach 
        int m=matrix.length;
        int n=matrix[0].length;
        int siRow=0,eiRow=m-1,p_row=-1;

        while(siRow<=eiRow){
            int midRow=siRow+(eiRow-siRow)/2;
            if(matrix[midRow][0]==target){
                return true;
            }else if(matrix[midRow][0]<target){
                p_row=midRow;
                siRow=midRow+1;
            }else{
                eiRow=midRow-1;
            }
        }
        if(p_row==-1){
            return false;
        }else{
            int siCol=0,eiCol=n-1;
            while(siCol<=eiCol){
                int midCol=siCol+(eiCol-siCol)/2;
                if(matrix[p_row][midCol]==target){
                    return true;
                }else if(matrix[p_row][midCol]>target){
                    eiCol=midCol-1;
                }else{
                    siCol=midCol+1;
                }
            }
            return false;
        }
    }
}