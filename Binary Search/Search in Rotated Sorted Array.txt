//Approach -> 1

class Solution {
    public int search(int[] nums, int target) {
        // log(n)
        int n=nums.length;
        int si=0,ei=n-1;

        while(si<=ei){
            int mid=si+(ei-si)/2;
            int startEle=nums[si];
            int endEle=nums[ei];
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]<endEle){
                if(target<=endEle && mid+1<n && target>=nums[mid+1]){
                    si=mid+1;
                }else{
                    ei=mid-1;
                }
            }else{
                if(target>=startEle && mid-1>=0 && target<=nums[mid-1]){
                    ei=mid-1;
                }else{
                    si=mid+1;
                }
            }
        }
        return -1;
    }
}

//Approach -> 2

class Solution {
    public int search(int[] nums, int target) {
        // O(2*logn)
        int si=0,ei=nums.length-1;

        while(si<ei){
            int mid=si+(ei-si)/2;
            if(nums[mid]>nums[ei]){ //right part
                si=mid+1;
            }else{ //left 
                ei=mid;
            }
        }

        int siAns=-1,eiAns=-1;
        if(nums[si]<=target && target<=nums[nums.length-1]){
            siAns=si;
            eiAns=nums.length-1;
        }else{
            siAns=0;
            eiAns=si-1;
        }

        while(siAns<=eiAns){
            int mid=siAns+(eiAns-siAns)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>target){
                eiAns=mid-1;
            }else{
                siAns=mid+1;
            }
        }
        return -1;
    }
}