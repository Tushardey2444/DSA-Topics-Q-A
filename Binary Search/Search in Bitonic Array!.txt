public class Solution {
    public int binarySearch1(ArrayList<Integer> A,int B,int start,int end){
        while(start<=end){
            int mid=start+(end-start)/2;
            
            if(A.get(mid)==B){
                return mid;
            }else if(A.get(mid)<B){
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        return -1;
    }
    public int binarySearch2(ArrayList<Integer> A,int B,int start,int end){
        while(start<=end){
            int mid=start+(end-start)/2;
            
            if(A.get(mid)==B){
                return mid;
            }else if(A.get(mid)<B){
                end=mid-1;
            }else{
                start=mid+1;
            }
        }
        return -1;
    }
    public int solve(ArrayList<Integer> A, int B) {
        
        //O(2logn) -> O(logn)
        
        int si=0,ei=A.size()-1,peak=-1,n=A.size();
        
        while(si<=ei){  // O(logn)
            int mid=si+(ei-si)/2;
            
            if(A.get(mid)==B){
                return mid;
            }else if(mid+1<n && mid-1>=0 && A.get(mid+1)<A.get(mid) && A.get(mid-1)<A.get(mid)){
                peak=mid;
                break;
            }else if(mid+1<n && A.get(mid)<A.get(mid+1)){
                si=mid+1;
            }else if(mid-1>=0 && A.get(mid)<A.get(mid-1)){
                ei=mid-1;
            }
        }
        int ans=-1;
        ans=binarySearch1(A,B,0,peak); //all over O(logn);
        if(ans==-1){
            ans=binarySearch2(A,B,peak+1,n-1);
        }
        return ans;
    }
}
