class Solution {
    public boolean isPossible(int[] nums,int n, int maxOperations,int minPenality){
        int opr=0;
        for(int i=0;i<n;i++){
            if(nums[i]%minPenality==0){
                opr+=((nums[i]/minPenality)-1);
            }else{
                opr+=(nums[i]/minPenality);
            }
        }
        if(opr<=maxOperations){
            return true;
        }else{
            return false;
        }
    }
    public int minimumSize(int[] nums, int maxOperations) {
        //ith -> bag
        // each bag contains some balls
        // perform operations atmost maxOperations
        // take any bag of balls and divide it into 2 new bags
        // my penalty is the maximum number of balls in a bag.
        // I want to minimize my penalty after the operations.
        int n=nums.length;
        int si=1,ei=0;
        for(int i=0;i<n;i++){
            ei=Math.max(ei,nums[i]);
        }
        int p_ans=si;

        while(si<=ei){
            int mid=si+(ei-si)/2;

            if(isPossible(nums,n,maxOperations,mid)){
                p_ans=mid;
                ei=mid-1;
            }else{
                si=mid+1;
            }
        }
        return p_ans;
    }
}